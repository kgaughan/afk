
					An introduction to AFK, an antiframework
					========================================

AFK is what I like to call an "antiframework": it's a bit like a framework,
but it's not really one. It's just a library with a few loosely-coupled 
components that wire together easily, combined with a few conventions, none
of which *need* to be followed, but allow everything to knit together more
easily if you stick to them.

Out of the box, AFK provides the following services:

 * Dispatch based on URL routing;
 * separation of request processing from template rendering;
 * a powerful but simple-to-use templating system;
 * a simple database API wrapper (covering MySQL only for now);
 * a data caching system;
 * a request pipelining system; and
 * clean handling of errors whereever PHP allows it.

It does not provide an O/R mapper of any kind and never will.

Rather than launching into how you can use AFK to build you own frameworks,
this document will first cover how to use the built-in miniature framework
that's pre-baked into AFK.

This document assumes that you are using Apache as your webserver and that
you're using a Unix or Unix-like system such as FreeBSD, MacOS X or later,
Linux, NetBSD, or Solaris. If you're using Windows or a webserver other than
Apache, YMMV.

I use vim as my editor here, but emacs, pico/nano, gedit, kate, or any other
editor is just fine.


Starting out
============

AFK comes with a skeleton directory structure for a basic project. It has
the following structure:

	assets/
		Your application's assets (images, stylesheets, javascript, &c.)

	assets/images/
		Your application's image assets.

	assets/all.css
	assets/print.css
	assets/screen.css
		Basic stylesheets for you to use as a base for your own.

	assets-fwk/
		AFK's own assets.

	classes/
		Your application's classes.

	handlers/
		You application's request handlers.

	handlers/RootHandler.php
		A basic request handler that does pretty much nothing except respond
		to requests to your application's default homepage.

	lib/
		Third party classes, libraries and the like go here.

	lib/afk/
		AFK itself! Probably a symbolic link.

	lib/classes/
		Third-party classes your application uses.

	lib/lib.php
		An optional file which gets included automatically upon each request.
		It should include sundry functions and classes that have nowhere else
		to go.

	templates/
		Your application's templates go here.

	config.php
		Your application's configuration goes here.

	dispatch.php
		A dispatcher page that processes all incoming requests.

	htaccess-template
		A template .htaccess file for use with Apache.

	sync
		A small template shell script for syncing with the live version of
		your site using rsync.


Initial setup
-------------

The first thing you'll want to do before doing anything else is to rename
the "htaccess-template" file to ".htaccess" and edit it so that it's suitable
for you site:

 $ mv htaccess-template .htaccess
 $ vim .htaccess

You'll be presented with something like this:

	RewriteEngine On
	RewriteBase %%APPLICATION_URI_PATH%%
	RewriteRule ^assets/.*         -                [L]
	RewriteRule ^assets-fwk/.*     -                [L]
	RewriteRule ^favicon\.ico      -                [L]
	RewriteRule ^robots\.txt       -                [L]
	RewriteRule ^dispatch\.php/.*  -                [L]
	RewriteRule ^(.*)$             dispatch.php/$1  [QSA,L]

Most of this is just fine and doesn't need to be edited. However, you *will*
need to edit the 'RewriteBase' line to suit your application. Change the
text currently marked '%%APPLICATION_URI_PATH%%' to wherever your application
is situated relative to the root of your webserver. For instance, if your
application is at "http://localhost/zoot/", "%%APPLICATION_URI_PATH%%" will
need to be changed to "/zoot/".

If all is well, you should be greeted by the message "You're looking at the
default view template" in your browser. Sweet!


Changing the default homepage
-----------------------------

If you open up handlers/RootHandler.php, you'll see something like this:

	<?php
	class RootHandler extends AFK_HandlerBase {

		public function on_get(AFK_Context $ctx) {
		}
	}
	?>

It has one method, on_get(), which means it can respond to HTTP GET requests.
It doesn't do any processing and is just there so that the dispatcher knows
it can handle HTTP GET requests.

Unless the on_get() method tells AFK otherwise, it will look for for a
template called default.php to render next. Because the handler handing the
request is called 'RootHandler', it will first look in the directory
'templates/root/' for the template. If it can't be found there, it looks
in the 'templates/' folder for it instead. If it still hasn't been found, it
uses the fallback default.php template that comes with AFK. Right now, that's
what's being rendered, but we're going to change that.

Create the directory 'templates/root':

 $ mkdir templates/root

Now, open up your text editor and enter the following:

	<html>
		<head>
			<title>Hello, world!</title>
		</head>
		<body>
			<h1>Hello, world!</h1>
		</body>
	</html>

And save that as 'templates/root/default.php'.

If you refresh your browser, you should see the page you just created in it.
So far we haven't done anything that makes using AFK any more useful than
straight PHP, but thankfully the effort hasn't been much more, and we're
going to start doing more interesting things now anyway.


Making request handler's slightly more useful
---------------------------------------------

We're going to do two simple things with our current root request handler:
we're going to get it to accept a parameter through the query string and
pass the time into our template.

AFK has two important notions, those of the request pipeline and of a request
context. A request pipeline is a chain of bits of code that manipulate a
request context in some way before passing it on to the next bit of code in
the chain. The request context consists of any information the browser making
the request included in the request such as query string parameters, HTTP
headers, form fields, &c. The various bits of code along the request pipeline
can also add and change this information before passing it on.

Request handlers and the template engine are both part of this pipeline.
For instance, a request handler could get the ID of a weblog entry, fetch
the entry from a database, add the contents of the entry to the request
context for the template engine to render later.

We're going to change RootHandler::on_get() so that it takes a name as a
parameter and passes the current time to the template through the request
context:

	<?php
	class RootHandler extends AFK_HandlerBase {

		public function on_get(AFK_Context $ctx) {
			// If a name parameter isn't given, default it to
			// Anon E. Mouse.
			if (is_null($ctx->name)) {
				$ctx->name = "Anon E. Mouse";
			}
			// Current date formatted according to RFC 2822.
			$ctx->now = date('r');
		}
	}
	?>

The content of the request context gets pulled into the template as regular
variables, though you can still access the request context object using the
$ctx variable. Let's change template/root/default.php to cope with the
changes to RootHandler::on_get():

	<html>
		<head>
			<title>Hello, <?php ee($name) ?>!</title>
		</head>
		<body>
			<h1>Hello, <?php ee($name) ?>!</h1>
			<p>The time is now: <?php ee($now) ?></p>
		</body>
	</html>

Now refresh your browser. If you add '?name=Keith' onto the end of the URL in
your browser's address field, you'll see the name change.

You'll notice a function you might be unfamiliar with: ee(). This is a useful
function included in AFK which joins up all its parameters into on string,
runs the result through htmlspecialchar() to escape any special characters,
and then echos it. Its a safe and convenient alternative to using echo() when
you're working with HTML.


Dealing with simple forms
-------------------------

Unless you're just rendering static content, some interactivity is useful.
Let's add a simple form to templates/root/default.php so that the name can
be changed more easily:

	<html>
		<head>
			<title>Hello, <?php ee($name) ?>!</title>
		</head>
		<body>
			<h1>Hello, <?php ee($name) ?>!</h1>
			<p>The time is now: <?php ee($now) ?></p>
			<form method="get" action="">
				But my name is really
				<input type="text" name="name" value="<?php ee($name) ?>"/>
				<input type="submit" value="Go!"/>
			</form>
		</body>
	</html>

Abracadabra, ham sandwich, and refresh your browser.


Envelopes
---------

Here's where AFK starts to become somewhat more useful.

Sites tend to have common headers and footers for all their pages, and even
individual page fragments also tend to have bits common to them before and
after they start. AFK's templating engine generalises this this notion as
'envelopes'. An envelope is simply a template that wraps the output of
another template just like an envelope wraps a letter.

There's a big chunk of HTML in templates/root/default.php that could probably
be used elsewhere on the site, so let's pull it out into an envelope
template.

There are two special things about envelope templates, specifically that
their name ends with '.envelope.php' rather than just '.php' and that when
rendered, they have an extra variable called "$generated_content", which
contains the text generated by the template being wrapped.

Seeing as this template will probably be used throughout the site, we'll
create it in the templates/ directory rather than the templates/root/
directory. We'll call it default.envelope.php:

	<html>
		<head>
			<title><?php ee($page_title) ?></title>
		</head>
		<body>
			<h1><?php ee($page_title) ?></h1>
			<?php echo $generated_content ?>
		</body>
	</html>

By convention, AFK uses the variable $page_title for page titles. You don't
have to stick to this, but life's easier if you do.

Templates aren't wrapped automatically in envelopes. You need to request this
of the template engine. It's easy enough to do though. Let's edit
templates/root/default.php to use the envelope template:

	<?php $this->with_envelope() ?>
	<p>The time is now: <?php ee($now) ?></p>
	<form method="get" action="">
		But my name is really
		<input type="text" name="name" value="<?php ee($name) ?>"/>
		<input type="submit" value="Go!"/>
	</form>

The ::with_envelope() method tells the template engine to wrap this template
in an envelope. It can optionally take the name of the envelope template you
want to use, but if you don't specify one, it'll look for an envelope
template with the same name of the template being rendered, and if that
doesn't exist, it'll use the envelope template called 'default', so if your
template is called 'zoot.php', it'll first look for 'zoot.envelope.php', and
failing that, look for 'default.envelope.php'.

In the envelope template, where we used to have "Hello, <?php ee($name) ?>!",
we now have "<?php ee($page_title) ?>". We _could_ have left the old code in
there as envelope templates can see everything within the context of the
template being wrapped (with certain caveats and limitations), but that would
have rendered the envelope template useless with other pages. Instead, we're
going to set the $page_title variable within RootHandler::on_get():

	<?php
	class RootHandler extends AFK_HandlerBase {

		public function on_get(AFK_Context $ctx) {
			// If a name parameter isn't given, default it to
			// Anon E. Mouse.
			if (is_null($ctx->name)) {
				$ctx->name = "Anon E. Mouse";
			}
			// Current date formatted according to RFC 2822.
			$ctx->now = date('r');

			$ctx->page_title = "Hello, " . $ctx->name;
		}
	}
	?>

Refresh your browser and bask in your monitor's cold glow.


Configuration and routing
-------------------------

We've covered a lot, and at this point you ought to be able to build simple
applications. However, we're limited by a few things:

 1. We've only one request handler, and refuses point blank to handle anything
    other than HTTP GET requests.
 2. We're limited to doing all our work with one rather boring URL.
 3. If we want to configure anything, it all needs to be done in
    RootHandler::on_get(), which is far from ideal.

It's time, then, to take a look at the config.php file.

config.php is where all you application's configuration information goes. It
has two functions, routes() and init(), and a plain vanilla copy looks like
this:

	<?php
	function routes() {
		$r = new AFK_Routes();
		$r->route('/', array('_handler' => 'Root'));
		$r->fallback(array('_handler' => 'AFK_Default'));
		return $r;
	}

	function init() {
		error_reporting(E_ALL);
		date_default_timezone_set('UTC');
		return array();
	}
	?>

